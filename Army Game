#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

/*
 * Complete the gameWithCells function below.
 */
int gameWithCells(int n, int m) {
    int packages = 0;
    int arr [n][m];

    if (n != 1 && m != 1)
    {
        for (int i=0; i<n; i++)
        {
            for (int x=0; x<m; x++)
            {
                arr[i][x] = 1;
            }
        }
        for (int i =0; i<=n-2; i++)
        {
            for (int x=0;x<=m-2;x++)
            {
                if (arr[i][x] == 1 && arr[i+1][x] == 1 && arr[i][x+1] == 1 && arr[i+1][x+1]== 1)
                {
                    arr[i][x] = 2;
                    arr[i+1][x] = 2;
                    arr[i][x+1] = 2;
                    arr[i+1][x+1] = 2;
                    packages++;
                }
        
            }
        }
        for (int i =0; i<=n-2; i++)
        {
            for (int x=0;x<=m-2;x++)
            {
                if (arr[i][x] + arr[i+1][x] + arr[i][x+1] + arr[i+1][x+1] == 6)
                {
                    arr[i][x] = 2;
                    arr[i+1][x] = 2;
                    arr[i][x+1] = 2;
                    arr[i+1][x+1] = 2;
                    packages++;
                }
        
            }
        }
        for (int i =0; i<=n-2; i++)
        {
            for (int x=0;x<=m-2;x++)
            {
                if (arr[i][x] + arr[i+1][x] + arr[i][x+1] + arr[i+1][x+1] == 7)
                {
                    arr[i][x] = 2;
                    arr[i+1][x] = 2;
                    arr[i][x+1] = 2;
                    arr[i+1][x+1] = 2;
                    packages++;
                }
        
            }
        }
        return packages;
    }
    if (n % 2 == 0 || m % 2 == 0)
    {
        if (n == 1 && m == 1)
        {
            packages = 1;
        
        }else if (n == 1)
        {
            packages = m/2;
        
        }
        else
        {
            packages = n/2;
        }
    }
    else
    {
        if (n == 1 && m == 1)
        {
            packages = 1;
        
        }else if (n == 1)
        {
            packages = m/2 + 1;
        
        }
        else
        {
            packages = n/2 + 1;
        }  
    }
    packages = ceil(packages);
    return packages;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    int result = gameWithCells(n, m);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
